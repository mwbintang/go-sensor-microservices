// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: sensor.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sensor data message
type SensorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Unit          string                 `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SensorData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SensorData) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SensorData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SensorData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SensorData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// Request message for getting sensor data
type SensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorRequest) Reset() {
	*x = SensorRequest{}
	mi := &file_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorRequest) ProtoMessage() {}

func (x *SensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorRequest.ProtoReflect.Descriptor instead.
func (*SensorRequest) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *SensorRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

// Response message containing sensor data
type SensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *SensorData            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorResponse) Reset() {
	*x = SensorResponse{}
	mi := &file_sensor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorResponse) ProtoMessage() {}

func (x *SensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorResponse.ProtoReflect.Descriptor instead.
func (*SensorResponse) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *SensorResponse) GetData() *SensorData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SensorResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_sensor_proto protoreflect.FileDescriptor

const file_sensor_proto_rawDesc = "" +
	"\n" +
	"\fsensor.proto\"x\n" +
	"\n" +
	"SensorData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\",\n" +
	"\rSensorRequest\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\"I\n" +
	"\x0eSensorResponse\x12\x1f\n" +
	"\x04data\x18\x01 \x01(\v2\v.SensorDataR\x04data\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status2x\n" +
	"\rSensorService\x122\n" +
	"\rGetSensorData\x12\x0e.SensorRequest\x1a\x0f.SensorResponse\"\x00\x123\n" +
	"\x10StreamSensorData\x12\x0e.SensorRequest\x1a\v.SensorData\"\x000\x01B8Z6github.com/your-username/go-sensor-microservices/protob\x06proto3"

var (
	file_sensor_proto_rawDescOnce sync.Once
	file_sensor_proto_rawDescData []byte
)

func file_sensor_proto_rawDescGZIP() []byte {
	file_sensor_proto_rawDescOnce.Do(func() {
		file_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sensor_proto_rawDesc), len(file_sensor_proto_rawDesc)))
	})
	return file_sensor_proto_rawDescData
}

var file_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sensor_proto_goTypes = []any{
	(*SensorData)(nil),     // 0: SensorData
	(*SensorRequest)(nil),  // 1: SensorRequest
	(*SensorResponse)(nil), // 2: SensorResponse
}
var file_sensor_proto_depIdxs = []int32{
	0, // 0: SensorResponse.data:type_name -> SensorData
	1, // 1: SensorService.GetSensorData:input_type -> SensorRequest
	1, // 2: SensorService.StreamSensorData:input_type -> SensorRequest
	2, // 3: SensorService.GetSensorData:output_type -> SensorResponse
	0, // 4: SensorService.StreamSensorData:output_type -> SensorData
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sensor_proto_init() }
func file_sensor_proto_init() {
	if File_sensor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sensor_proto_rawDesc), len(file_sensor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sensor_proto_goTypes,
		DependencyIndexes: file_sensor_proto_depIdxs,
		MessageInfos:      file_sensor_proto_msgTypes,
	}.Build()
	File_sensor_proto = out.File
	file_sensor_proto_goTypes = nil
	file_sensor_proto_depIdxs = nil
}
